{"version":3,"sources":["components/UserInfo/UserInfo.tsx","api/users.ts","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/todos.ts","App.tsx","index.tsx"],"names":["UserInfo","props","user","className","href","email","name","id","username","TodoInfo","todo","classNames","completed","title","userId","usersFromServer","find","TodoList","todos","map","App","useState","setTitle","setUserId","isFormSubmitted","setisFormSubmitted","todosFromServer","setTodos","action","method","onSubmit","event","preventDefault","newTodoId","sort","a","b","prevState","type","placeholder","value","onChange","target","htmlFor","disabled","userFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ab3d8787.chunk.js","sourcesContent":["interface User {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n}\n\nexport const UserInfo = (props: { user: User }) => {\n  const { user } = props;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import classNames from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport usersFromServer from '../../api/users';\nimport { TodoInfoProps } from '../../types/TodoInfoProps';\n\ninterface User {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n}\n\nconst getUserById = (id: number): User => {\n  return usersFromServer.find((user) => user.id === id) as User || null;\n};\n\nexport const TodoInfo = ({ todo }: TodoInfoProps) => {\n  return (\n    <article\n      data-id={todo.id}\n      className={classNames('TodoInfo', {\n        'TodoInfo--completed': todo.completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n\n      <UserInfo user={getUserById(todo.userId)} />\n    </article>\n  );\n};\n","import { TodoListProps } from '../../types/TodoListProps';\nimport { Todo } from '../../types/todo';\nimport { TodoInfo } from '../TodoInfo';\n\nexport const TodoList = (props: TodoListProps) => {\n  const { todos } = props;\n\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo: Todo) => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import './App.scss';\nimport { useState } from 'react';\nimport { TodoList } from './components/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nexport const App = () => {\n  const [title, setTitle] = useState('');\n  const [userId, setUserId] = useState('0');\n  const [isFormSubmitted, setisFormSubmitted] = useState(false);\n  const [todos, setTodos] = useState(todosFromServer);\n\n  const clearForm = () => {\n    setUserId('0');\n    setTitle('');\n    setisFormSubmitted(false);\n  };\n\n  const handleSubmit\n   = (event:React.SyntheticEvent) => {\n     event.preventDefault();\n     setisFormSubmitted(true);\n\n     if (!title || userId === '0') {\n       return;\n     }\n\n     const newTodoId: number = todosFromServer.sort(\n       (a, b) => b.id - a.id,\n     )[0].id + 1;\n\n     setTodos((prevState) => [...prevState, {\n       id: newTodoId,\n       title,\n       completed: false,\n       userId: +userId,\n     }]);\n\n     clearForm();\n   };\n\n  const handleTitleChange: React.ChangeEventHandler<HTMLInputElement>\n    = (event) => {\n      setTitle(event.target.value);\n    };\n\n  const handleUserChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label>\n            Title:\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              placeholder=\"Please enter a title\"\n              value={title}\n              onChange={handleTitleChange}\n            />\n\n            {(!title && isFormSubmitted)\n            && <span className=\"error\">Please enter a title</span>}\n          </label>\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"userSelect\">User: </label>\n          <select\n            data-cy=\"userSelect\"\n            id=\"userSelect\"\n            value={userId}\n            onChange={handleUserChange}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map((userFromServer) => {\n              return (\n                <option\n                  value={userFromServer.id}\n                  key={userFromServer.id}\n                >\n                  {userFromServer.name}\n                </option>\n              );\n            })}\n          </select>\n\n          {(userId === '0' && isFormSubmitted)\n          && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}